import requests
import os
import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# --- 설정 ---
# GitHub Secrets로부터 API 키 및 이메일 정보 가져오기
NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
GMAIL_ADDRESS = os.environ.get('GMAIL_ADDRESS')
GMAIL_APP_PASSWORD = os.environ.get('GMAIL_APP_PASSWORD')
RECIPIENT_EMAIL = os.environ.get('RECIPIENT_EMAIL')

KEYWORDS = ["이동통신 단말기", "모뎀 칩셋", "온디바이스 AI", "온디바이스 보안"]

def fetch_news(keyword):
    """지정된 키워드로 NewsAPI에서 최신 뉴스 10개를 가져옵니다."""
    print(f"'{keyword}' 키워드로 뉴스 가져오는 중...")
    today = datetime.date.today()
    # 외국 사이트를 고려하여 하루 전 날짜부터 검색
    from_date = today - datetime.timedelta(days=1)
    
    url = (
        "https://newsapi.org/v2/everything?"
        f"q={keyword}&"
        f"from={from_date.isoformat()}&"
        "language=ko&"  # 한국어 뉴스 우선 검색
        "pageSize=10&"
        "sortBy=publishedAt&" # 최신순으로 정렬
        f"apiKey={NEWS_API_KEY}"
    )
    
    try:
        response = requests.get(url)
        response.raise_for_status()  # HTTP 오류 발생 시 예외 발생
        news_data = response.json()
        print(f"'{keyword}' 키워드로 {len(news_data.get('articles', []))}개의 뉴스 수집 완료.")
        return news_data.get('articles', [])
    except requests.exceptions.RequestException as e:
        print(f"뉴스 API 요청 중 오류 발생 ({keyword}): {e}")
        return []
    except Exception as e:
        print(f"알 수 없는 오류 발생 ({keyword}): {e}")
        return []

def create_html_template(news_by_keyword):
    """수집된 뉴스 데이터로 HTML 내용을 생성합니다."""
    print("HTML 템플릿 생성 중...")
    kst_time = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=9)))
    title_date = kst_time.strftime("%Y년 %m월 %d일")
    
    body_content = ""
    for keyword, articles in news_by_keyword.items():
        body_content += f"<h2>주요 키워드: {keyword}</h2>\n"
        if not articles:
            body_content += "<p>관련 최신 뉴스를 찾을 수 없습니다.</p>\n"
            continue
            
        body_content += "<ul>\n"
        for article in articles:
            title = article.get('title', '제목 없음')
            url = article.get('url', '#')
            # 요약이 너무 길 경우 200자로 제한
            description = article.get('description', '요약 없음') or "요약 없음"
            summary = (description[:200] + '...') if len(description) > 200 else description
            
            body_content += f"""
            <li>
                <h3><a href="{url}" target="_blank" rel="noopener noreferrer">{title}</a></h3>
                <p>{summary}</p>
            </li>
            """
        body_content += "</ul>\n<hr>\n"

    html = f"""
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>오늘의 테크 뉴스 ({title_date})</title>
        <style>
            body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; margin: 20px; }}
            h1 {{ color: #333; }}
            h2 {{ color: #555; border-bottom: 2px solid #eee; padding-bottom: 10px; }}
            ul {{ list-style-type: none; padding-left: 0; }}
            li {{ margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px; }}
            h3 a {{ text-decoration: none; color: #0056b3; }}
            h3 a:hover {{ text-decoration: underline; }}
            p {{ color: #666; }}
            .footer {{ text-align: center; margin-top: 30px; font-size: 0.9em; color: #888; }}
        </style>
    </head>
    <body>
        <h1>📰 오늘의 테크 뉴스 ({title_date})</h1>
        <p>이 페이지는 GitHub Actions에 의해 매일 오전 9시에 자동으로 업데이트됩니다.</p>
        <hr>
        {body_content}
        <div class="footer">
            <p>Generated by Python & GitHub Actions</p>
        </div>
    </body>
    </html>
    """
    print("HTML 템플릿 생성 완료.")
    return html

def save_html_file(html_content):
    """생성된 HTML 내용을 index.html 파일로 저장합니다."""
    try:
        with open("index.html", "w", encoding="utf-8") as f:
            f.write(html_content)
        print("index.html 파일 저장 완료.")
    except IOError as e:
        print(f"파일 저장 중 오류 발생: {e}")

def send_email(html_content):
    """HTML 내용을 이메일로 발송합니다."""
    if not all([GMAIL_ADDRESS, GMAIL_APP_PASSWORD, RECIPIENT_EMAIL]):
        print("이메일 발송에 필요한 정보(Secrets)가 부족하여 이메일을 발송하지 않습니다.")
        return

    print(f"{RECIPIENT_EMAIL} 주소로 이메일 발송 시도...")
    kst_time = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=9)))
    subject = f"📰 오늘의 테크 뉴스 브리핑 ({kst_time.strftime('%Y-%m-%d')})"

    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = GMAIL_ADDRESS
    msg['To'] = RECIPIENT_EMAIL
    
    part = MIMEText(html_content, 'html')
    msg.attach(part)

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(GMAIL_ADDRESS, GMAIL_APP_PASSWORD)
            smtp.send_message(msg)
        print("이메일 발송 성공!")
    except Exception as e:
        print(f"이메일 발송 중 오류 발생: {e}")

if __name__ == "__main__":
    if not NEWS_API_KEY:
        print("오류: NEWS_API_KEY가 설정되지 않았습니다. GitHub Secrets를 확인해주세요.")
    else:
        all_news = {}
        for kw in KEYWORDS:
            all_news[kw] = fetch_news(kw)
        
        html_output = create_html_template(all_news)
        save_html_file(html_output)
        send_email(html_output)
        print("모든 작업 완료.")
